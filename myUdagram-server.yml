Description: >
    Project 2 - Deploy a high-availability web app using CloudFormation
    Udagram Web App - Rahul Gupta    
    This is the Cloudformation template for the server resources for this app
    This includes LoadBalancer, Launch Template, AutoScaling group, security groups,
    a Listener and Target Group along with health check.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    myLaunchTemplateVersionNumber:
        Description: To define default value of Launch template version number
        Type: String
        Default: 1

    myS3Bucket:
        Description: Details of the S3 bucket
        Type: String

    myArchiveFile:
        Description: Details of the file available in the S3 bucket
        Type: String

Resources:

  myLBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} LBSecGroup

  myWebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} WebServerSecGroup
  
  myWebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile: 
          Arn: !GetAtt
          - ProfileWithRolesForOurApp
          - Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install awscli -y
            sudo apt-get install unzip
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            sudo rm /var/www/html/index.html
            sudo aws s3 cp s3://${myS3Bucket}/${myArchiveFile} /var/www/html
            sudo unzip /var/www/html/MyUdagram.zip -d /var/www/html/
            sudo systemctl restart apache2.service
            sudo aws s3 cp /var/log/cloud-init-output.log s3://my504793965814
        # AMI ID of Ubuntu Linux machine. 
        ImageId: ami-0261755bbcb8c4a84
        SecurityGroupIds:
        - !Ref myWebServerSecGroup
        InstanceType: t2.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  myWebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref myWebAppLaunchTemplate
        Version: !Ref myLaunchTemplateVersionNumber
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: myWebAppTargetGroup 

  myWebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: myLBSecGroup
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} WebAppLB

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: myWebAppTargetGroup
      LoadBalancerArn:
        Ref: myWebAppLB
      Port: '80'
      Protocol: HTTP

  myALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'myWebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'myListener'
        Priority: 1

  myWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} WebAppTargetGroup

  UdacityS3ReadOnlyEC2: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    DependsOn: UdacityS3ReadOnlyEC2
    Properties: 
      Path: /
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  myUdacityPolicy:
    Type: AWS::IAM::Policy
    DependsOn: UdacityS3ReadOnlyEC2
    Properties: 
      PolicyName: myUdacityPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: '*'
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2

Outputs: 
  myLBDNS: 
      Description: The public DNS of the LB which will open the website
      Value: !Join [ "", [ "http://", !GetAtt myWebAppLB.DNSName ] ]